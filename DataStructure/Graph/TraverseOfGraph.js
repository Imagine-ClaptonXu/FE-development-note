// -------- 图的遍历 --------
/* 图的遍历
和树类似，也可以访问图的所有节点。
有两种算法可以对图进行遍历：广度优先搜索（breadth-first search，BFS）和深度优先搜索（depth-first search，DFS）。
图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等等。


在实现算法之前，理解一下图遍历的思想。
图遍历算法的思想是必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索。
对于两种图遍历算法，都需要明确指出第一个被访问的顶点。完全探索一个顶点要查看该顶点的每一条边。
对于每一条边所连接的没有被访问过的顶点，将其标注为被发现的，并将其加进待访问顶点列表中。
为了保证算法的效率，务必访问每个顶点至多两次。连通图中每条边和顶点都会被访问到。


广度优先搜索算法和深度优先搜索算法基本上是相同的，只有一点不同，那就是待访问顶点列表的数据结构不同：
深度优先搜索： 栈，     将顶点存入栈，      顶点是沿着路径被探索的，存在新的相邻顶点就去访问
广度优先搜索： 队列，   将顶点存入队列，    最先入队列的顶点先被探索


当要标注已经访问过的顶点时，用三种颜色来反映它们的状态。
- 白色：表示该顶点还没有被访问。
- 灰色：表示该顶点被访问过，但并未被探索过。
- 黑色：表示该顶点被访问过且被完全探索过。
这就是之前提到的务必访问每个顶点最多两次的原因。
*/

// 为了有助于在广度优先和深度优先算法中标记顶点，要使用 Colors 变量（作为一个枚举器）:
const Colors = {
    WHITE: 0,
    GREY: 1,
    BLACK: 2,
}

// 两个算法还需要一个辅助对象来帮助存储顶点是否被访问过。在每个算法的开头，所有的顶点会被标记为未访问（白色）。初始化每个顶点的颜色:
const initializeColor = vertices => {
    const color = {}
    for (let i = 0; i < vertices.length; i++) {
        color[vertices[i]] = Colors.WHITE
    }
    return color
}
