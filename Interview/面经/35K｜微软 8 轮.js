/*
背景

我是985本科，已经在前端开发领域工作了一年半。最近，我参加了微软苏州的社招面试。因为我的技术栈偏向前端，所以面试中问了很多前端相关的问题。不过，微软的面试其实更看重编程能力和测试技巧。

评价一下微软的话，我觉得微软是一家非常注重技术和创新的公司。它有着全球领先的技术实力和丰富的资源，这对技术人员来说是一个很好的平台，可以接触到许多前沿的技术和大型项目。此外，微软的工作环境也非常国际化和多元化，能够让你与来自不同背景的人一起工作，开阔眼界。总体来说，微软是个很理想的职业发展之地，特别适合那些热爱技术、喜欢挑战的人。


一面
一面的面试官是一个小姐姐，聊天中感觉她是非常熟悉前端的，所以也问了很多前端相关的问题。

1、英文自我介绍

2、项目介绍，下面的问题也更多是从项目中延伸的

3、React Native运行的大致原理

4、React Native有vdom吗

5、React Native有几个线程，分别负责什么工作，有阻塞关系吗

6、AppRegistry的作用

7、前端微服务的理解

前端微服务是一种将微服务架构的概念引入到前端开发中的方法。它通过将一个大型的前端应用拆分成多个独立的小型前端应用，这些小型应用可以独立开发、部署和运行。这种方法有助于提高应用的可维护性、扩展性和开发效率。

核心理念
模块化：将大型前端应用拆解成多个功能相对独立的小模块，每个模块可以由不同的团队开发和维护。

独立部署：每个前端微服务可以独立构建和部署，不需要整个应用重新打包和发布。

技术多样性：不同的前端微服务可以使用不同的技术栈，允许团队根据需求选择最合适的工具和框架。

隔离性：每个前端微服务在运行时相对独立，可以减少模块之间的耦合和依赖，增强稳定性。

实现方式
Iframe：最简单的实现方式，通过多个iframe嵌入不同的前端应用，但存在性能问题和用户体验不佳等缺点。

Web Components：利用Web组件技术，如Custom Elements和Shadow DOM，将每个前端微服务封装成独立的组件。

JavaScript Bundling：将每个前端微服务打包成独立的JavaScript文件，然后在主应用中动态加载。

Server-side Composition：在服务器端进行组合，返回一个包含多个前端微服务的完整页面。

Single-SPA：一个流行的开源框架，专门用于管理和集成多个前端微服务。

优点
独立开发和部署：每个前端微服务可以独立开发、测试和部署，从而加快发布周期，提高开发效率。

技术多样性：团队可以选择最适合的技术栈，对于不同的微服务使用不同的框架和工具。

可维护性：应用被拆分成多个小型服务，每个服务的代码库更小，更容易理解和维护。

团队协作：不同团队可以并行开发互不干扰的微服务，减少了团队之间的依赖和冲突。

缺点
复杂性增加：引入前端微服务后，应用的架构和部署流程变得更加复杂，需要额外的协调和管理。

性能问题：如果处理不当，可能会带来性能问题，例如多个微服务的网络请求和资源加载。

共享状态和数据管理：如何管理和共享全局状态和数据会变得更加复杂，比如跨微服务的状态同步和通信。

常见场景
大型企业级应用：如电商平台、门户网站等，由于业务复杂度高，适合采用前端微服务架构。

多团队协作：当一个应用由多个团队共同开发时，前端微服务可以帮助减少团队之间的依赖和冲突。

渐进式迁移：在逐步迁移大型单体应用到现代前端框架时，可以采用前端微服务架构进行平滑过渡。


8、前端的监控你们是怎么做的，性能监控/错误监控

9、出现线上问题时，以你的经验一般是如何定位的呢？

复现问题：首先要确认问题在哪些环境、哪些用户、哪些操作下会出现，尽可能复现问题，确定问题的触发条件。

查看日志：查看前端代码的日志输出，包括浏览器控制台的错误信息、日志文件等，找出异常信息和报错位置。

网络请求：检查网络请求是否正常，包括请求的参数、返回的数据格式等，可以使用开发者工具查看网络请求的细节。

排除因素：检查其他可能导致问题的因素，比如浏览器兼容性、缓存问题、网络延迟等，逐步排除可能的原因。

单元测试：如果有单元测试，可以运行相关的单元测试用例，排查问题是否源于特定功能模块。

沟通协作：与后端、产品经理等团队成员沟通，确认是否是后端接口返回数据异常或者需求理解不一致导致的问题。

代码 Review：检查有关该功能的代码，看是否有明显的问题或者潜在的漏洞。

提交修复：根据定位的问题原因，进行修复，然后提交到版本控制系统，并在测试环境中验证修复效果。


10、coding

编写一个组件，在input中输入文本，在给定的数据中查找相关的项目，并渲染搜索结果列表。

11、follow up

防抖
渲染列表时 key 的作用是什么
这次面试更多是对基础知识的考察，面试结果很快，当天晚上就约了后面的四次面试。


二面
1、英文自我介绍

2、英文聊项目

3、ES7了解吗，聊聊新特性吧

4、bind的作用

5、JavaScript是如何处理异步的

6、coding

使用Promise封装XMLHttpRequest，需要在浏览器真实环境中跑起来，需要发出真实请求获得数据，建议自己寻找可用的服务完成测试。

这个题目本身并不难，我觉得面试官考的是面试者能不能在有限的时间内搜集有效信息完成测试，coding中要注意错误处理。

7、给定一个字符串，按照字符频率降序重排字符，否则按照字典序升序。例如: "acba" 最终为 "aabc"。

8、follow up

详细分析时间复杂度，这里有一个遍历/拼接字符串的复杂度 O(n),还有一个对字符集排序的复杂度O(klogk)

你的算法对任意字符串都有效吗？答案是否定的，对于特殊字符其长度不一定为一个字节，那么在遍历字符串时就会不准确，详细可以看一下字符编码，这里不展开了。


三面
1、自我介绍

2、聊项目

3、coding

监控二叉树 https://leetcode.cn/problems/binary-tree-cameras/description/


四面
1、英文自我介绍

2、英文聊项目

3、思维题：在二维空间是用最少边数封闭图形是三角形，在三维空间使用最少边数封闭空间是三棱锥，那么在四维空间使用最少边数的封闭物体有多少个面。这道题主要考推理逻辑思维，我当时给出答案可能不是正确的，大家可以思考下。

4、coding

给你一条链表，统计多少个节点是重复的，可以改变链表，要求在最小的空间复杂度前提下时间复杂度尽量最小。例如 1 - 2 - 3 - 1 - 5 - 1，答案就是3，有3个重复的1.

5、follow up

链表有环怎么办？


五面
1、英文自我介绍

2、英文聊项目

3、coding

给定一个数字 n ，给定一组magicNums，都在[0,9] 中，要求使用 magicNums 构成比 n 小的最大数字，每种数字的个数不限。

我使用了回溯，然后需要注意无法构成的特殊情况，可能有更好的解法。

本来到这里就结束了面试，后面HR反馈说面评不错，应该稳了，等HC批下来，我就准备过年躺平了😂。

年后HR反馈说HC没有了，我面试的比较晚，在面试过程中发出去的offer已经把HC签完了。表示理解，也感谢HR帮忙match了新的组，遂继续面试。

与新组沟通，看了我的情况后表示之前的面得不错，只需要加3次面试就可以了。


六面（换组后）
1、自我介绍

2、项目聊的很细，主要是问了如何实现的，为什么这么实现，有没有遇到印象比较深刻的问题，如何解决。也跟面试官讨论了各种可能的解决方案

3、讨论了一下单元测试的相关内容

4、coding

实现节流，要求传入一个能够控制是否立即执行的参数

5、follow up

编写测试用例自测
要求测试能够自动执行，比如在CI/CD环境下


七面
1、自我介绍

2、聊项目

coding:

最小栈 https://leetcode.cn/problems/min-stack/description/

恢复二叉搜索树 https://leetcode.cn/problems/recover-binary-search-tree/description/

做完后还有点时间，讨论了组内的业务，可能遇到的性能问题，你有什么建议之类的。


八面
1、自我介绍

2、展示了组内现在做的东西，并讨论了可能遇到的技术挑战

3、coding:

中文数字转int。 例如 输入 “一千七百八十二” 结果为 1782

题目不难，要注意计算时的溢出问题，也要注意非法输入之类的处理。


结语

经历了8次面试，虽然发生了小插曲，最后终于拿到了offer。

可以看到微软的面试也不是只有算法，对基础知识和项目的掌握也同样重要，在此分享下我的经历，希望给大家带来帮助，麻烦点个赞哦~

最后祝愿大家金三银四，面试成功，收割offer。
*/
